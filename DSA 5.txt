A1.

def convert_1d_array_to_2d_array(original, m, n):
    """
    Converts the 1D array original into a 2D array with m rows and n columns.

    Args:
        original: The 1D array of integers.
        m: The number of rows in the 2D array.
        n: The number of columns in the 2D array.

    Returns:
        The 2D array.
    """

    if len(original) != m * n:
        return []
    result = []
    for i in range(m):
        result.append(original[i * n: (i + 1) * n])
    return result


if __name__ == "__main__":
    original = [1, 2, 3, 4]
    m = 2
    n = 2
    result = convert_1d_array_to_2d_array(original, m, n)
    print(result)

A2.

def staircase_rows(n):
    """
    Determines the number of complete rows of the staircase.

    Args:
        n: The number of coins.

    Returns:
        The number of complete rows of the staircase.
    """

    current_row = 1
    complete_rows = 0
    while current_row <= n:
        if n >= current_row:
            complete_rows += 1
            n -= current_row
        current_row += 1
    return complete_rows


if __name__ == "__main__":
    n = 5
    result = staircase_rows(n)
    print(result)

A3.

def sorted_squares(nums):
    """
    Computes the squares of the elements in nums and returns them in sorted order.

    Args:
        nums: The array of integers.

    Returns:
        The array of squares of the elements in nums sorted in non-decreasing order.
    """

    squared_nums = []
    for num in nums:
        squared_nums.append(num * num)
    squared_nums.sort()
    return squared_nums


if __name__ == "__main__":
    nums = [-4, -1, 0, 3, 10]
    result = sorted_squares(nums)
    print(result)

A4.

def find_distinct_numbers(nums1, nums2):
    """
    Finds the distinct numbers in nums1 and nums2 and returns them in a list of two lists.

    Args:
        nums1: The first array of integers.
        nums2: The second array of integers.

    Returns:
        A list of two lists, where the first list contains the distinct integers in nums1 that are not present in nums2, and the second list contains the distinct integers in nums2 that are not present in nums1.
    """

    distinct_nums1 = []
    distinct_nums2 = []
    for num in nums1:
        if num not in distinct_nums2:
            distinct_nums1.append(num)
    for num in nums2:
        if num not in distinct_nums1:
            distinct_nums2.append(num)
    return [distinct_nums1, distinct_nums2]


if __name__ == "__main__":
    nums1 = [1, 2, 3]
    nums2 = [2, 4, 6]
    result = find_distinct_numbers(nums1, nums2)
    print(result)

A5.

def distance_value(arr1, arr2, d):
    """
    Computes the distance value between the two arrays.

    Args:
        arr1: The first array of integers.
        arr2: The second array of integers.
        d: The maximum difference between two elements.

    Returns:
        The distance value between the two arrays.
    """

    count = 0
    for num in arr1:
        found = False
        for other_num in arr2:
            if abs(num - other_num) <= d:
                found = True
                break
        if not found:
            count += 1
    return count


if __name__ == "__main__":
    arr1 = [4, 5, 8]
    arr2 = [10, 9, 1, 8]
    d = 2
    result = distance_value(arr1, arr2, d)
    print(result)

A6.

def find_duplicates(nums):
    """
    Finds all the integers that appear twice in the array nums.

    Args:
        nums: The array of integers.

    Returns:
        An array of all the integers that appear twice in the array nums.
    """

    seen = set()
    duplicates = []
    for num in nums:
        if num in seen:
            duplicates.append(num)
        else:
            seen.add(num)
    return duplicates


if __name__ == "__main__":
    nums = [4, 3, 2, 7, 8, 2, 3, 1]
    result = find_duplicates(nums)
    print(result)

A7.

def find_minimum_element(nums):
    """
    Finds the minimum element in the rotated array nums.

    Args:
        nums: The rotated array.

    Returns:
        The minimum element in the rotated array nums.
    """

    low = 0
    high = len(nums) - 1
    while low <= high:
        mid = (low + high) // 2
        if nums[mid] < nums[high]:
            return nums[mid]
        else:
            high = mid - 1
    return nums[0]


if __name__ == "__main__":
    nums = [3, 4, 5, 1, 2]
    result = find_minimum_element(nums)
    print(result)

A8.

def undouble(changed):
    """
    Returns the original array if changed is a doubled array.

    Args:
        changed: The doubled array.

    Returns:
        The original array if changed is a doubled array, or an empty array otherwise.
    """

    seen = set()
    original = []
    for num in changed:
        if num not in seen:
            original.append(num)
        else:
            twice = num * 2
            if twice not in seen:
                original.append(twice)
            seen.add(num)
    return original


if __name__ == "__main__":
    changed = [1, 3, 4, 2, 6, 8]
    result = undouble(changed)
    print(result)

