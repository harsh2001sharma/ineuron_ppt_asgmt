A1.

def my_sqrt(x):
    """
    Computes the square root of x rounded down to the nearest integer.

    Args:
        x: The input integer.

    Returns:
        The square root of x rounded down to the nearest integer.
    """

    if x < 0:
        raise ValueError("x must be non-negative")

    low = 0
    high = x
    while low <= high:
        mid = (low + high) // 2
        if mid * mid <= x < (mid + 1) * (mid + 1):
            return mid
        elif x < mid * mid:
            high = mid - 1
        else:
            low = mid + 1
    return low


if __name__ == "__main__":
    x = 4
    result = my_sqrt(x)
    print(result)

A2.

def find_peak_element(nums):
    """
    Finds a peak element in the array nums.

    Args:
        nums: The array to search.

    Returns:
        The index of a peak element, or -1 if no peak element is found.
    """

    low = 0
    high = len(nums) - 1
    while low <= high:
        mid = (low + high) // 2
        if mid == 0 or nums[mid - 1] < nums[mid]:
            if mid == len(nums) - 1 or nums[mid + 1] < nums[mid]:
                return mid
            else:
                high = mid - 1
        else:
            low = mid + 1
    return -1


if __name__ == "__main__":
    nums = [1, 2, 3, 1]
    result = find_peak_element(nums)
    print(result)

A3.

def missing_number(nums):
    """
    Finds the missing number in the array nums.

    Args:
        nums: The array to search.

    Returns:
        The missing number in the range [0, n].
    """

    n = len(nums)
    expected_sum = n * (n + 1) // 2
    actual_sum = sum(nums)
    return expected_sum - actual_sum


if __name__ == "__main__":
    nums = [9, 6, 4, 2, 3, 5, 7, 0, 1]
    result = missing_number(nums)
    print(result)

A4.

def find_duplicate(nums):
    """
    Finds the duplicate number in the array nums.

    Args:
        nums: The array to search.

    Returns:
        The duplicate number in the array.
    """

    seen = {}
    for num in nums:
        if num in seen:
            return num
        else:
            seen[num] = True
    return -1


if __name__ == "__main__":
    nums = [1, 3, 4, 2, 2]
    result = find_duplicate(nums)
    print(result)

A5.

def intersection(nums1, nums2):
    """
    Finds the intersection of the arrays nums1 and nums2.

    Args:
        nums1: The first array.
        nums2: The second array.

    Returns:
        An array of the intersection of nums1 and nums2.
    """

    result = []
    seen = set()
    for num in nums1:
        if num in seen:
            continue
        else:
            seen.add(num)
            if num in nums2:
                result.append(num)
    return result


if __name__ == "__main__":
    nums1 = [1, 2, 2, 1]
    nums2 = [2, 2]
    result = intersection(nums1, nums2)
    print(result)

A6.

def find_min_rotated_sorted_array(nums):
    left = 0
    right = len(nums) - 1

    while left < right:
        mid = left + (right - left) // 2

        if nums[mid] > nums[right]:
            left = mid + 1
        else:
            right = mid

    return nums[left]


if __name__ == "__main__":
    nums = [3, 4, 5, 1, 2]
    result = find_min_rotated_sorted_array(nums)
    print(result)

A7.

def find_range(nums, target):
    """
    Finds the starting and ending position of the target value in the array nums.

    Args:
        nums: The array to search.
        target: The target value to search for.

    Returns:
        A list of two integers, the first being the starting position of the target value and the second being the ending position. If the target value is not found, return [-1, -1].
    """

    if not nums:
        return [-1, -1]

    low = 0
    high = len(nums) - 1
    start = -1
    while low <= high:
        mid = (low + high) // 2
        if nums[mid] == target:
            start = mid
            high = mid - 1
        elif nums[mid] < target:
            low = mid + 1
        else:
            high = mid - 1

    end = -1
    low = 0
    high = len(nums) - 1
    while low <= high:
        mid = (low + high) // 2
        if nums[mid] == target:
            end = mid
            low = mid + 1
        elif nums[mid] < target:
            low = mid + 1
        else:
            high = mid - 1

    return [start, end]


if __name__ == "__main__":
    nums = [5, 7, 7, 8, 8, 10]
    target = 8
    result = find_range(nums, target)
    print(result)

A8.

def intersection(nums1, nums2):
    """
    Finds the intersection of the arrays nums1 and nums2.

    Args:
        nums1: The first array.
        nums2: The second array.

    Returns:
        An array of the intersection of nums1 and nums2.
    """

    seen = set()
    result = []
    for num in nums1:
        if num in seen:
            continue
        else:
            seen.add(num)
            if num in nums2:
                result.append(num)
    return result


if __name__ == "__main__":
    nums1 = [1, 2, 2, 1]
    nums2 = [2, 2]
    result = intersection(nums1, nums2)
    print(result)
