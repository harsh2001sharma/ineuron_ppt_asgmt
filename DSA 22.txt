A1.

class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None


def convert_binary_tree_to_dll(root):
    """
    Convert a binary tree to a doubly linked list.

    Args:
        root: The root of the binary tree.

    Returns:
        The head of the doubly linked list.
    """

    if not root:
        return None

    global prev
    prev = None

    def _convert_binary_tree_to_dll(node):
        nonlocal prev

        if not node:
            return

        _convert_binary_tree_to_dll(node.left)

        if prev:
            prev.right = node
            node.left = prev
        else:
            head = node

        prev = node

        _convert_binary_tree_to_dll(node.right)

    _convert_binary_tree_to_dll(root)

    return head


def main():
    root = TreeNode(10)
    root.left = TreeNode(5)
    root.right = TreeNode(20)
    root.right.left = TreeNode(30)
    root.right.right = TreeNode(35)

    result = convert_binary_tree_to_dll(root)

    def print_dll(node):
        while node:
            print(node.val)
            node = node.right

    print_dll(result)


if __name__ == "__main__":
    main()

A2.

class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None


def flip_binary_tree(root):
    """
    Flips a binary tree towards the right direction.

    Args:
        root: The root of the binary tree.

    Returns:
        The flipped binary tree.
    """

    if not root:
        return None

    def _flip_binary_tree(node):
        if not node:
            return None

        left = node.left
        right = node.right

        node.left = right
        node.right = left

        _flip_binary_tree(left)
        _flip_binary_tree(right)

    _flip_binary_tree(root)

    return root


def main():
    root = TreeNode(10)
    root.left = TreeNode(5)
    root.right = TreeNode(20)
    root.right.left = TreeNode(30)
    root.right.right = TreeNode(35)

    result = flip_binary_tree(root)

    def print_tree(node):
        if not node:
            return

        print(node.val)
        print_tree(node.left)
        print_tree(node.right)

    print_tree(result)


if __name__ == "__main__":
    main()

A3.

class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None


def print_root_to_leaf_paths(root, path):
    """
    Print all root-to-leaf paths in a binary tree.

    Args:
        root: The root of the binary tree.
        path: The current path.
    """

    if not root:
        return

    if not root.left and not root.right:
        print(path + [root.val])
        return

    path.append(root.val)
    print_root_to_leaf_paths(root.left, path)
    print_root_to_leaf_paths(root.right, path)
    path.pop()


def main():
    root = TreeNode(6)
    root.left = TreeNode(3)
    root.right = TreeNode(5)
    root.left.left = TreeNode(2)
    root.right.left = TreeNode(5)
    root.right.right = TreeNode(4)
    root.right.left.left = TreeNode(7)
    root.right.left.right = TreeNode(4)

    print_root_to_leaf_paths(root, [])


if __name__ == "__main__":
    main()

A4.

def is_same_tree(inorder, preorder, postorder):
    """
    Checks if the given preorder, inorder, and postorder traversals are of the same tree.

    Args:
        inorder: The inorder traversal of the tree.
        preorder: The preorder traversal of the tree.
        postorder: The postorder traversal of the tree.

    Returns:
        True if the given traversals are of the same tree, False otherwise.
    """

    index = 0
    map = {}
    for val in inorder:
        map[val] = index
        index += 1

    def _is_same_tree(preorder_start, preorder_end, inorder_start, inorder_end):
        if preorder_start >= preorder_end or inorder_start >= inorder_end:
            return True

        root = preorder[preorder_start]
        left_subtree_size = map[root] - inorder_start

        if not _is_same_tree(preorder_start + 1, preorder_start + left_subtree_size, inorder_start, inorder_start + left_subtree_size):
            return False

        if not _is_same_tree(preorder_start + left_subtree_size + 1, preorder_end, inorder_start + left_subtree_size + 1, inorder_end):
            return False

        return True

    return _is_same_tree(0, len(preorder), 0, len(inorder))


def main():
    inorder = [4, 2, 5, 1, 3]
    preorder = [1, 2, 4, 5, 3]
    postorder = [4, 5, 2, 3, 1]

    result = is_same_tree(inorder, preorder, postorder)
    print(result)


if __name__ == "__main__":
    main()
