A1.

def two_sum(nums, target):
    """
    Finds the indices of the two numbers in nums that add up to target.

    Args:
        nums: An array of integers.
        target: The target sum.

    Returns:
        A list of two integers, the indices of the two numbers that add up to target.
    """

    seen = set()
    for i, num in enumerate(nums):
        complement = target - num
        if complement in seen:
            return [i, seen[complement]]
        else:
            seen.add(num)
    return []


if __name__ == "__main__":
    nums = [2, 7, 11, 15]
    target = 9
    indices = two_sum(nums, target)
    print(indices)

A2. 

def remove_element(nums, val):
    """
    Removes all occurrences of val in nums in-place.

    Args:
        nums: An array of integers.
        val: The value to remove.

    Returns:
        The number of elements in nums which are not equal to val.
    """

    k = 0
    for i in range(len(nums)):
        if nums[i] != val:
            nums[k] = nums[i]
            k += 1
    nums[k:] = [None] * (len(nums) - k)
    return k


if __name__ == "__main__":
    nums = [3, 2, 2, 3]
    val = 3
    k = remove_element(nums, val)
    print(nums)
    print(k)

A3.

def searchInsert(nums, target):
    left, right = 0, len(nums) - 1
    
    while left <= right:
        mid = left + (right - left) // 2
        
        if nums[mid] == target:
            return mid
        
        if nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    
    return left

if __name__ == "__main__":
   nums = [1, 3, 5, 6]
   target = 5
   result = searchInsert(nums, target)
   print(result)

A4.

def increment_integer(digits):
    """
    Increments the large integer represented by digits by one.

    Args:
        digits: An array of integers representing the large integer.

    Returns:
        The array of digits representing the incremented integer.
    """

    n = len(digits)
    i = n - 1
    carry = 1
    while i >= 0:
        digits[i] += carry
        if digits[i] == 10:
            digits[i] = 0
            carry = 1
        else:
            carry = 0
        i -= 1
    if carry == 1:
        digits.append(1)
    return digits


if __name__ == "__main__":
    digits = [1, 2, 3]
    result = increment_integer(digits)
    print(result)

A5.

def merge_sorted_arrays(nums1, m, nums2, n):
    """
    Merges two sorted arrays into a single sorted array.

    Args:
        nums1: The first array to be merged.
        m: The number of elements in nums1.
        nums2: The second array to be merged.
        n: The number of elements in nums2.

    Returns:
        None. The merged array is stored in nums1.
    """

    i = 0
    j = 0
    k = 0
    while i < m and j < n:
        if nums1[i] <= nums2[j]:
            nums1[k] = nums1[i]
            i += 1
        else:
            nums1[k] = nums2[j]
            j += 1
        k += 1
    while i < m:
        nums1[k] = nums1[i]
        i += 1
        k += 1
    while j < n:
        nums1[k] = nums2[j]
        j += 1
        k += 1


if __name__ == "__main__":
    nums1 = [1, 2, 3, 0, 0, 0]
    m = 3
    nums2 = [2, 5, 6]
    n = 3
    merge_sorted_arrays(nums1, m, nums2, n)
    print(nums1)

A6.

def contains_duplicate(nums):
    """
    Checks if any value appears at least twice in the array nums.

    Args:
        nums: An array of integers.

    Returns:
        True if any value appears at least twice in the array, False otherwise.
    """

    seen = set()
    for num in nums:
        if num in seen:
            return True
        else:
            seen.add(num)
    return False


if __name__ == "__main__":
    nums = [1, 2, 3, 1]
    result = contains_duplicate(nums)
    print(result)

A7.

def move_zeros_to_end(nums):
    """
    Move all 0's to the end of the array nums while maintaining the relative order of the nonzero elements.

    Args:
        nums: An array of integers.

    Returns:
        None. The array nums is modified in-place.
    """

    j = 0
    for i in range(len(nums)):
        if nums[i] != 0:
            nums[j] = nums[i]
            j += 1
    for i in range(j, len(nums)):
        nums[i] = 0


if __name__ == "__main__":
    nums = [0, 1, 0, 3, 12]
    move_zeros_to_end(nums)
    print(nums)

A8.

def find_error_nums(nums):
    """
    Finds the number that occurs twice and the number that is missing in the array nums.

    Args:
        nums: An array of integers.

    Returns:
        An array of two integers, the first element is the number that occurs twice and the second element is the number that is missing.
    """

    xor = 0
    for num in nums:
        xor ^= num
    for i in range(1, len(nums) + 1):
        xor ^= i
    right_most_set_bit = xor & (-xor)
    missing = 0
    for num in nums:
        if num & right_most_set_bit:
            missing ^= num
    repeated = missing ^ xor
    return [repeated, missing]


if __name__ == "__main__":
    nums = [1, 2, 2, 4]
    result = find_error_nums(nums)
    print(result)

