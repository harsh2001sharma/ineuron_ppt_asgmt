A1.

def is_isomorphic(s, t):
  
  if len(s) != len(t):
    return False

  # Create a mapping from each character in s to its corresponding character in t
  mapping = {}
  for i in range(len(s)):
    mapping[s[i]] = t[i]

  # Check if the mapping is one-to-one
  for i in range(len(s)):
    if mapping.get(s[i], None) != t[i]:
      return False

  return True


A2.

def is_strobogrammatic(num):

  strobogrammatic_numbers = ["0", "1", "8", "6", "9"]

  for i in range(len(num) // 2):
    if num[i] not in strobogrammatic_numbers or num[i] != num[len(num) - 1 - i]:
      return False

  return True

A3.

def sum_strings(num1, num2):
 
  # Convert the strings to integers.
  num1 = int(num1)
  num2 = int(num2)

  # Calculate the sum
  sum_num = num1 + num2

  # Convert the sum to a string
  sum_str = str(sum_num)

  # Return the sum string
  return sum_str

A4.

def reverse_words(sentence):
    words = sentence.split(" ")
    newWords = [word[::-1] for word in words]
    return ' '.join(newWords)

A5.

def reverse_alternate_k_characters(s, k):

  for i in range(0, len(s), 2 * k):
    start = i
    end = min(i + k, len(s))
    reversed_string = s[start:end][::-1]
    s = s[:start] + reversed_string + s[end:]

  return s

A6.

def can_become_after_shifts(s, goal):

  if len(s) != len(goal):
    return False

  for i in range(len(s)):
    if s == goal[i:] + goal[:i]:
      return True

  return False

A7.

def are_equal_after_backspaces(s, t):
  
  stack1 = []
  stack2 = []

  for c in s:
    if c == '#':
      if stack1:
        stack1.pop()
    else:
      stack1.append(c)

  for c in t:
    if c == '#':
      if stack2:
        stack2.pop()
    else:
      stack2.append(c)

  return stack1 == stack2

A8.

def check_straight_line(coordinates):
  
  # Check if there are at least two points.
  if len(coordinates) < 2:
    return False

  # Calculate the slope of the line.
  slope = (coordinates[1][1] - coordinates[0][1]) / (coordinates[1][0] - coordinates[0][0])

  # Check if all points have the same slope.
  for i in range(2, len(coordinates)):
    if (coordinates[i][1] - coordinates[i - 1][1]) / (coordinates[i][0] - coordinates[i - 1][0]) != slope:
      return False

  # All points have the same slope, so they make a straight line.
  return True

