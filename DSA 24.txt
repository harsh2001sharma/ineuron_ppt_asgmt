A1.

def roman_to_integer(s):
    """
    Converts a roman numeral to an integer.

    Args:
        s: The roman numeral string.

    Returns:
        The integer representation of the roman numeral.
    """

    mapping = {
        "I": 1,
        "V": 5,
        "X": 10,
        "L": 50,
        "C": 100,
        "D": 500,
        "M": 1000,
    }

    total = 0
    prev_val = 0
    for ch in s:
        val = mapping[ch]

        if prev_val < val:
            total -= prev_val
        else:
            total += val

        prev_val = val

    return total


def main():
    s = "III"
    result = roman_to_integer(s)
    print(result)


if __name__ == "__main__":
    main()

A2.

def longest_substring_without_repeating_characters(s):
    """
    Finds the length of the longest substring without repeating characters.

    Args:
        s: The string.

    Returns:
        The length of the longest substring without repeating characters.
    """

    max_len = 0
    prev_index = {}
    i = 0

    for j in range(len(s)):
        if s[j] in prev_index:
            i = max(prev_index[s[j]] + 1, i)

        max_len = max(max_len, j - i + 1)
        prev_index[s[j]] = j

    return max_len


def main():
    s = "abcabcbb"
    result = longest_substring_without_repeating_characters(s)
    print(result)


if __name__ == "__main__":
    main()

A3.

def majority_element(nums):
    """
    Finds the majority element in an array.

    Args:
        nums: The array.

    Returns:
        The majority element in the array.
    """

    count = 0
    element = nums[0]

    for num in nums:
        if count == 0:
            element = num
            count = 1
        elif num == element:
            count += 1
        else:
            count -= 1

    return element


def main():
    nums = [3, 2, 3]
    result = majority_element(nums)
    print(result)


if __name__ == "__main__":
    main()

A4.

def group_anagrams(strs):
    """
    Groups the anagrams together in an array.

    Args:
        strs: The array of strings.

    Returns:
        The array of grouped anagrams.
    """

    result = collections.defaultdict(list)

    for str in strs:
        sorted_str = "".join(sorted(str))
        result[sorted_str].append(str)

    return list(result.values())


def main():
    strs = ["eat", "tea", "tan", "ate", "nat", "bat"]
    result = group_anagrams(strs)
    print(result)


if __name__ == "__main__":
    main()

A5.

def ugly_number(n):
    """
    Finds the nth ugly number.

    Args:
        n: The index of the ugly number.

    Returns:
        The nth ugly number.
    """

    ugly_numbers = [1]
    i2 = 0
    i3 = 0
    i5 = 0

    for _ in range(1, n + 1):
        next_ugly = min(2 * ugly_numbers[i2], 3 * ugly_numbers[i3], 5 * ugly_numbers[i5])
        ugly_numbers.append(next_ugly)

        if next_ugly == 2 * ugly_numbers[i2]:
            i2 += 1
        elif next_ugly == 3 * ugly_numbers[i3]:
            i3 += 1
        elif next_ugly == 5 * ugly_numbers[i5]:
            i5 += 1

    return ugly_numbers[-1]


def main():
    n = 10
    result = ugly_number(n)
    print(result)


if __name__ == "__main__":
    main()

A6.

import collections


def top_k_frequent_words(words, k):
    """
    Finds the k most frequent words in an array of strings.

    Args:
        words: The array of strings.
        k: The number of most frequent words to find.

    Returns:
        The k most frequent words.
    """

    count_map = collections.Counter(words)
    max_heap = []

    for word, count in count_map.items():
        heapq.heappush(max_heap, (-count, word))

    top_k_words = []
    for _ in range(k):
        count, word = heapq.heappop(max_heap)
        top_k_words.append(word)

    return top_k_words


def main():
    words = ["i", "love", "leetcode", "i", "love", "coding"]
    k = 2
    result = top_k_frequent_words(words, k)
    print(result)


if __name__ == "__main__":
    main()

A7.

def sliding_window_maximum(nums, k):
    """
    Finds the maximum sliding window in an array.

    Args:
        nums: The array.
        k: The size of the sliding window.

    Returns:
        The maximum sliding window.
    """

    max_window = []
    window = collections.deque(nums[:k])

    for i in range(k, len(nums)):
        if window[0] < nums[i]:
            window.popleft()

        window.append(nums[i])
        max_window.append(max(window))

    return max_window


def main():
    nums = [1, 3, -1, -3, 5, 3, 6, 7]
    k = 3
    result = sliding_window_maximum(nums, k)
    print(result)


if __name__ == "__main__":
    main()

A8.

def find_k_closest_elements(arr, k, x):
    """
    Finds the k closest elements to x in the array.

    Args:
        arr: The array.
        k: The number of closest elements to find.
        x: The target value.

    Returns:
        The k closest elements to x in the array.
    """

    left = 0
    right = len(arr) - 1
    closest_elements = []

    while left <= right:
        mid = (left + right) // 2

        if abs(arr[mid] - x) <= abs(arr[mid + 1] - x):
            closest_elements.append(arr[mid])
            left = mid + 1
        else:
            closest_elements.append(arr[mid + 1])
            right = mid - 1

    return closest_elements[0:k]


def main():
    arr = [1, 2, 3, 4, 5]
    k = 4
    x = 3
    result = find_k_closest_elements(arr, k, x)
    print(result)


if __name__ == "__main__":
    main()
