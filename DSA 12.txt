A1.

def delete_middle_node(head):
    """
    Deletes the middle node of the linked list.

    Args:
        head: The head of the linked list.

    Returns:
        The head of the linked list after deleting the middle node.
    """

    if head is None or head.next is None:
        return None
    slow = head
    fast = head.next
    prev = None
    while fast is not None and fast.next is not None:
        prev = slow
        slow = slow.next
        fast = fast.next.next
    if prev is None:
        head = head.next
    else:
        prev.next = slow.next
    return head


if __name__ == "__main__":
    head = ListNode(1)
    head.next = ListNode(2)
    head.next.next = ListNode(3)
    head.next.next.next = ListNode(4)
    head.next.next.next.next = ListNode(5)
    result = delete_middle_node(head)
    print(result)

A2.

def detect_loop(head):
    """
    Checks if the linked list has a loop.

    Args:
        head: The head of the linked list.

    Returns:
        True if the linked list has a loop, False otherwise.
    """

    slow = head
    fast = head
    while slow is not None and fast is not None and fast.next is not None:
        slow = slow.next
        fast = fast.next.next
        if slow == fast:
            return True
    return False


if __name__ == "__main__":
    value = [1, 3, 4]
    x = 2
    head = ListNode(value[0])
    for i in range(1, len(value)):
        node = ListNode(value[i])
        node.next = head
        head = node
    head.next = head.next.next
    result = detect_loop(head)
    print(result)

A3.

def find_nth_node_from_end(head, n):
    """
    Finds the Nth node from the end of the linked list.

    Args:
        head: The head of the linked list.
        n: The Nth node from the end of the linked list.

    Returns:
        The Nth node from the end of the linked list.
    """

    slow = fast = head
    for i in range(n):
        if fast is None:
            return None
        fast = fast.next
    while fast is not None:
        slow = slow.next
        fast = fast.next
    return slow


if __name__ == "__main__":
    value = [1, 2, 3, 4, 5, 6, 7, 8, 9]
    head = ListNode(value[0])
    for i in range(1, len(value)):
        node = ListNode(value[i])
        node.next = head
        head = node
    result = find_nth_node_from_end(head, 2)
    print(result.val)

A4.

def is_palindrome(head):
    """
    Checks if the linked list is a palindrome.

    Args:
        head: The head of the linked list.

    Returns:
        True if the linked list is a palindrome, else False.
    """

    slow = fast = head
    while fast is not None and fast.next is not None:
        slow = slow.next
        fast = fast.next.next
    if fast is not None:
        return False
    else:
        while slow is not None:
            if slow.val != head.val:
                return False
            slow = slow.next
            head = head.next
        return True


if __name__ == "__main__":
    value = ['R', 'A', 'D', 'A', 'R']
    head = ListNode(value[0])
    for i in range(1, len(value)):
        node = ListNode(value[i])
        node.next = head
        head = node
    result = is_palindrome(head)
    print(result)

A5.

def remove_loop(head, n, x):
    """
    Removes the loop from the linked list.

    Args:
        head: The head of the linked list.
        n: The number of nodes in the linked list.
        x: The position of the node that the last node is connected to.

    Returns:
        True if the loop was removed successfully, False otherwise.
    """

    slow = fast = head
    for i in range(1, n + 1):
        if fast is None:
            return False
        slow = slow.next
        fast = fast.next
        if i == x:
            fast = fast.next
        if slow == fast:
            break
    slow = head
    while slow != fast.next:
        slow = slow.next
        fast = fast.next
    fast.next = None
    return True


if __name__ == "__main__":
    value = [1, 3, 4]
    n = 3
    x = 2
    head = ListNode(value[0])
    for i in range(1, len(value)):
        node = ListNode(value[i])
        node.next = head
        head = node
    result = remove_loop(head, n, x)
    print(result)

A6.

def print_alternate_nodes(head, m, n):
    """
    Print the alternate nodes of the linked list.

    Args:
        head: The head of the linked list.
        m: The number of nodes to retain.
        n: The number of nodes to delete.

    """

    current = head
    while current is not None:
        for _ in range(m):
            if current is None:
                return
            print(current.val, end=" ")
            current = current.next
        for _ in range(n):
            if current is None:
                return
            current = current.next
    print()


if __name__ == "__main__":
    value = [1, 2, 3, 4, 5, 6, 7, 8]
    m = 2
    n = 2
    head = ListNode(value[0])
    for i in range(1, len(value)):
        node = ListNode(value[i])
        node.next = head
        head = node
    print_alternate_nodes(head, m, n)

A7.

def insert_nodes(head1, head2):
    """
    Inserts the nodes of the second linked list into the first linked list at alternate positions.

    Args:
        head1: The head of the first linked list.
        head2: The head of the second linked list.

    Returns:
        The head of the first linked list after inserting the nodes of the second linked list.
    """

    current = head1
    while current is not None and head2 is not None:
        next1 = current.next
        next2 = head2.next
        current.next = head2
        head2 = next2
        current = next1
    if head2 is not None:
        current.next = head2
    return head1


if __name__ == "__main__":
    value1 = [5, 7, 17, 13, 11]
    value2 = [12, 10, 2, 4, 6]
    head1 = ListNode(value1[0])
    head2 = ListNode(value2[0])
    for i in range(1, len(value1)):
        node = ListNode(value1[i])
        node.next = head1
        head1 = node
    for i in range(1, len(value2)):
        node = ListNode(value2[i])
        node.next = head2
        head2 = node
    result = insert_nodes(head1, head2)
    print_linked_list(result)

A8.

def is_circular_linked_list(head):
    """
    Checks if the linked list is circular.

    Args:
        head: The head of the linked list.

    Returns:
        True if the linked list is circular, False otherwise.
    """

    slow = fast = head
    while fast is not None and fast.next is not None:
        slow = slow.next
        fast = fast.next.next
        if slow == fast:
            return True
    return False


if __name__ == "__main__":
    head = ListNode(1)
    head.next = ListNode(2)
    head.next.next = ListNode(3)
    head.next.next.next = head
    result = is_circular_linked_list(head)
    print(result)
