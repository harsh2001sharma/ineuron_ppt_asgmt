A1.

def three_sum_closest(nums, target):
    """
    Determines the sum of three integers in the array nums that is closest to the target.

    Args:
        nums: An array of integers.
        target: An integer.

    Returns:
        The sum of the three integers.
    """

    nums.sort()
    closest_sum = float("inf")
    for i in range(len(nums)):
        left = i + 1
        right = len(nums) - 1
        while left < right:
            current_sum = nums[i] + nums[left] + nums[right]
            if abs(current_sum - target) < abs(closest_sum - target):
                closest_sum = current_sum
            if current_sum < target:
                left += 1
            else:
                right -= 1
    return closest_sum


if __name__ == "__main__":
    nums = [-1, 2, 1, -4]
    target = 1
    result = three_sum_closest(nums, target)
    print(result)

A2.

def four_sum(nums, target):
    """
    Determines the quadruplets in the array nums such that their sum is equal to the target.

    Args:
        nums: An array of integers.
        target: An integer.

    Returns:
        A list of all the quadruplets.
    """

    quadruplets = []
    nums.sort()
    for i in range(len(nums)):
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        for j in range(i + 1, len(nums)):
            if j > i + 1 and nums[j] == nums[j - 1]:
                continue
            left = j + 1
            right = len(nums) - 1
            while left < right:
                current_sum = nums[i] + nums[j] + nums[left] + nums[right]
                if current_sum == target:
                    quadruplets.append([nums[i], nums[j], nums[left], nums[right]])
                    left += 1
                    right -= 1
                elif current_sum < target:
                    left += 1
                else:
                    right -= 1
    return quadruplets


if __name__ == "__main__":
    nums = [1, 0, -1, 0, -2, 2]
    target = 0
    result = four_sum(nums, target)
    print(result)

A3.

def next_permutation(nums):
    """
    Determines the next lexicographically greater permutation of the array nums.

    Args:
        nums: An array of integers.

    Returns:
        The next lexicographically greater permutation of the array nums.
    """

    i = len(nums) - 1
    while i > 0 and nums[i - 1] >= nums[i]:
        i -= 1
    if i == 0:
        nums.reverse()
    else:
        j = len(nums) - 1
        while nums[j] <= nums[i - 1]:
            j -= 1
        nums[i - 1], nums[j] = nums[j], nums[i - 1]
        nums[i:] = nums[i:][::-1]
    return nums


if __name__ == "__main__":
    nums = [1, 2, 3]
    result = next_permutation(nums)
    print(result)

A4.

def searchInsert(nums, target):
    left = 0
    right = len(nums) - 1

    while left <= right:
        mid = left + (right - left) // 2

        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return left

A5.

def increment_integer(digits):
    """
    Increments the large integer represented by the array digits and returns the resulting array of digits.

    Args:
        digits: An array of integers representing the large integer.

    Returns:
        The array of digits representing the incremented integer.
    """

    n = len(digits)
    carry = 1
    for i in range(n - 1, -1, -1):
        digits[i] += carry
        if digits[i] == 10:
            digits[i] = 0
            carry = 1
        else:
            carry = 0
    if carry:
        digits.insert(0, 1)
    return digits


if __name__ == "__main__":
    digits = [1, 2, 3]
    result = increment_integer(digits)
    print(result)

A6.

def single_number(nums):
    """
    Finds the single element in the array nums.

    Args:
        nums: An array of integers.

    Returns:
        The single element in the array nums.
    """

    xor = 0
    for num in nums:
        xor ^= num
    return xor


if __name__ == "__main__":
    nums = [2, 2, 1]
    result = single_number(nums)
    print(result)

A7.

def find_missing_ranges(nums, lower, upper):
    """
    Finds the shortest sorted list of ranges that exactly covers all the missing numbers in the range [lower, upper].

    Args:
        nums: A sorted unique integer array.
        lower: The lower bound of the range.
        upper: The upper bound of the range.

    Returns:
        The shortest sorted list of ranges that exactly covers all the missing numbers in the range [lower, upper].
    """

    ranges = []
    prev = lower
    for num in nums:
        if num < prev:
            continue
        if num == prev + 1:
            prev = num
        else:
            ranges.append([prev, num - 1])
            prev = num
    if prev < upper:
        ranges.append([prev, upper])
    return sorted(ranges)


if __name__ == "__main__":
    nums = [0, 1, 3, 50, 75]
    lower = 0
    upper = 99
    result = find_missing_ranges(nums, lower, upper)
    print(result)

A8.

def can_attend_all_meetings(intervals):
    """
    Determines if a person could attend all meetings in the array intervals.

    Args:
        intervals: An array of meeting time intervals.

    Returns:
        True if a person could attend all meetings, False otherwise.
    """

    intervals.sort(key=lambda x: x[0])
    for i in range(1, len(intervals)):
        if intervals[i][0] < intervals[i - 1][1]:
            return False
    return True


if __name__ == "__main__":
    intervals = [[0, 30], [5, 10], [15, 20]]
    result = can_attend_all_meetings(intervals)
    print(result)

