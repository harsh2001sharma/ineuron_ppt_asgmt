A1.

def detect_and_remove_loop(head):
    """
    Detects and removes a loop from a linked list.

    Args:
        head: The head of the linked list.

    Returns:
        The head of the linked list after removing the loop.
    """

    slow = fast = head
    while fast is not None and fast.next is not None:
        slow = slow.next
        fast = fast.next.next
        if slow == fast:
            break
    if fast is None:
        return head
    slow = head
    while slow != fast:
        slow = slow.next
        fast = fast.next
    fast.next = None
    return head


if __name__ == "__main__":
    value = [1, 3, 4]
    head = ListNode(value[0])
    for i in range(1, len(value)):
        node = ListNode(value[i])
        node.next = head
        head = node
    head.next.next.next = head
    result = detect_and_remove_loop(head)
    print_linked_list(result)

A2.

class ListNode:
    def __init__(self, val):
        self.val = val
        self.next = None


def add_one_to_linked_list(head):
    """
    Add 1 to the linked list representation of a number.

    Args:
        head: The head of the linked list.

    Returns:
        The head of the linked list after adding 1.
    """

    carry = 1
    current = head
    while current is not None:
        next_val = current.val + carry
        if next_val >= 10:
            next_val = 0
            carry = 1
        else:
            carry = 0
        current.val = next_val
        current = current.next
    if carry == 1:
        new_node = ListNode(1)
        new_node.next = head
        head = new_node
    return head


if __name__ == "__main__":
    value = [4, 5, 6]
    head = ListNode(value[0])
    for i in range(1, len(value)):
        node = ListNode(value[i])
        node.next = head
        head = node
    result = add_one_to_linked_list(head)
    print_linked_list(result)

A3.

class Node:
    def __init__(self, val, next=None, bottom=None):
        self.val = val
        self.next = next
        self.bottom = bottom

def flatten_linked_list(head):
    """
    Flattens a linked list of sub-linked lists into a single level linked list.

    Args:
        head: The head of the linked list.

    Returns:
        The head of the flattened linked list.
    """

    current = head
    while current is not None:
        next_node = current.next
        if next_node is not None:
            current.next = flatten_linked_list(next_node)
        current.bottom = current.next
        current = current.bottom
    return head


if __name__ == "__main__":
    value = [5, 10, 19, 28, 7, 20, 22, 35, 8, 50, 40, 30, 45]
    head = Node(value[0])
    for i in range(1, len(value)):
        node = Node(value[i])
        if i % 2 == 0:
            node.bottom = head
        head = node
    result = flatten_linked_list(head)
    print_linked_list(result)

A4.

class Node:
    def __init__(self, val, next=None, arb=None):
        self.val = val
        self.next = next
        self.arb = arb

def copy_random_linked_list(head, pairs):
    """
    Copies the given linked list and returns the head of the copied linked list.

    Args:
        head: The head of the linked list to be copied.
        pairs: A list of pairs denoting the random pointers in the original linked list.

    Returns:
        The head of the copied linked list.
    """

    new_head = Node(head.val)
    current = new_head
    map = {}
    for i in range(len(pairs)):
        map[pairs[i][0]] = Node(pairs[i][1])
    for i in range(len(pairs)):
        if head.arb is not None:
            current.arb = map[head.arb]
        head = head.next
        if head is not None:
            current.next = Node(head.val)
            current = current.next
    return new_head


if __name__ == "__main__":
    value = [1, 2, 3, 4]
    pairs = [[1, 2], [2, 4]]
    head = Node(value[0])
    for i in range(1, len(value)):
        node = Node(value[i])
        if i % 2 == 0:
            node.arb = head
        head = node
    result = copy_random_linked_list(head, pairs)
    print_linked_list(result)

A5.

class Node:
    def __init__(self, val, next=None, arb=None):
        self.val = val
        self.next = next
        self.arb = arb

def copy_random_linked_list(head, pairs):
    """
    Copies the given linked list and returns the head of the copied linked list.

    Args:
        head: The head of the linked list to be copied.
        pairs: A list of pairs denoting the random pointers in the original linked list.

    Returns:
        The head of the copied linked list.
    """

    new_head = Node(head.val)
    current = new_head
    map = {}
    for i in range(len(pairs)):
        map[pairs[i][0]] = Node(pairs[i][1])
    for i in range(len(pairs)):
        if head.arb is not None:
            current.arb = map[head.arb]
        head = head.next
        if head is not None:
            current.next = Node(head.val)
            current = current.next
    return new_head


if __name__ == "__main__":
    value = [1, 2, 3, 4]
    pairs = [[1, 2], [2, 4]]
    head = Node(value[0])
    for i in range(1, len(value)):
        node = Node(value[i])
        if i % 2 == 0:
            node.arb = head
        head = node
    result = copy_random_linked_list(head, pairs)
    print_linked_list(result)

A6.

def left_shift_linked_list(head, k):
    """
    Left-shifts the linked list by k nodes.

    Args:
        head: The head of the singly linked list.
        k: The number of nodes to left-shift.

    Returns:
        The head of the left-shifted linked list.
    """

    if k == 0:
        return head
    current = head
    for _ in range(k - 1):
        current = current.next
    new_head = current.next
    current.next = None
    last = new_head
    while last.next is not None:
        next_node = last.next
        last.next = current
        current = last
        last = next_node
    last.next = current
    return new_head


if __name__ == "__main__":
    value = [2, 4, 7, 8, 9]
    head = ListNode(value[0])
    for i in range(1, len(value)):
        node = ListNode(value[i])
        node.next = head
        head = node
    result = left_shift_linked_list(head, 3)
    print_linked_list(result)

A7.

def next_greater_node(head):
    """
    Finds the next greater node for each node in the linked list.

    Args:
        head: The head of the linked list.

    Returns:
        An integer array where answer[i] is the value of the next greater node of the ith node.
    """

    stack = []
    answer = [0] * len(head)
    for i in range(len(head)):
        while stack and head[stack[-1]] < head[i]:
            answer[stack[-1]] = head[i]
            stack.pop()
        stack.append(i)
    return answer


if __name__ == "__main__":
    value = [2, 1, 5]
    head = ListNode(value[0])
    for i in range(1, len(value)):
        node = ListNode(value[i])
        node.next = head
        head = node
    result = next_greater_node(head)
    print(result)

A8.

def remove_zero_sum_consecutive_nodes(head):
    """
    Removes all consecutive sequences of nodes that sum to 0 from the linked list.

    Args:
        head: The head of the linked list.

    Returns:
        The head of the final linked list.
    """

    curr = head
    while curr:
        sum = 0
        while curr and sum == 0:
            sum += curr.val
            curr = curr.next
        if sum == 0:
            curr = curr.next
        else:
            curr.val = sum
    return head


if __name__ == "__main__":
    value = [1, 2, -3, 3, 1]
    head = ListNode(value[0])
    for i in range(1, len(value)):
        node = ListNode(value[i])
        node.next = head
        head = node
    result = remove_zero_sum_consecutive_nodes(head)
    print_linked_list(result)
