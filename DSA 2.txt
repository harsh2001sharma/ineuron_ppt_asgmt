A1.

def max_pairwise_sum(nums):
    """
    Maximizes the sum of min(ai, bi) for all i in the array nums.

    Args:
        nums: An array of integers.

    Returns:
        The maximized sum.
    """

    nums.sort()
    max_sum = 0
    for i in range(0, len(nums), 2):
        max_sum += min(nums[i], nums[i + 1])
    return max_sum


if __name__ == "__main__":
    nums = [1, 4, 3, 2]
    result = max_pairwise_sum(nums)
    print(result)

A2.

def max_types_of_candies(candyType):
    """
    Determines the maximum number of different types of candies Alice can eat.

    Args:
        candyType: An array of integers representing the types of candies Alice has.

    Returns:
        The maximum number of different types of candies Alice can eat.
    """

    count_map = {}
    for candy in candyType:
        if candy in count_map:
            count_map[candy] += 1
        else:
            count_map[candy] = 1
    types = 0
    max_count = 0
    for candy, count in count_map.items():
        if count > max_count:
            types = 1
            max_count = count
        elif count == max_count:
            types += 1
    return types


if __name__ == "__main__":
    candyType = [1, 1, 2, 2, 3, 3]
    result = max_types_of_candies(candyType)
    print(result)

A3.

def longest_harmonious_subsequence(nums):
    """
    Determines the length of the longest harmonious subsequence in the array nums.

    Args:
        nums: An array of integers.

    Returns:
        The length of the longest harmonious subsequence in the array nums.
    """

    max_value = 0
    min_value = 0
    longest_hs = 0
    for num in nums:
        if num > max_value:
            max_value = num
        elif num < min_value:
            min_value = num
        if max_value - min_value == 1:
            longest_hs = max(longest_hs, 1 + len(list(filter(lambda x: x == num, nums))))
    return longest_hs


if __name__ == "__main__":
    nums = [1, 3, 2, 2, 5, 2, 3, 7]
    result = longest_harmonious_subsequence(nums)
    print(result)

A4.

def can_plant_flowers(flowerbed, n):
    """
    Determines if n new flowers can be planted in the flowerbed flowerbed without violating the no-adjacent-flowers rule.

    Args:
        flowerbed: An array of integers representing the flowerbed.
        n: The number of new flowers to be planted.

    Returns:
        True if n new flowers can be planted, False otherwise.
    """

    planted = 0
    last_empty = -1
    for i, num in enumerate(flowerbed):
        if num == 0:
            if last_empty == -1 or i - last_empty >= 2:
                planted += 1
                last_empty = i
        else:
            last_empty = -1
    return planted >= n


if __name__ == "__main__":
    flowerbed = [1, 0, 0, 0, 1]
    n = 1
    result = can_plant_flowers(flowerbed, n)
    print(result)

A5.

def max_product_of_three(nums):
    """
    Determines the maximum product of three numbers in the array nums.

    Args:
        nums: An array of integers.

    Returns:
        The maximum product of three numbers in the array nums.
    """

    max1 = max2 = max3 = float("-inf")
    min1 = min2 = float("inf")
    for num in nums:
        if num > max1:
            max3 = max2
            max2 = max1
            max1 = num
        elif num > max2:
            max3 = max2
            max2 = num
        elif num > max3:
            max3 = num
        if num < min1:
            min2 = min1
            min1 = num
        elif num < min2:
            min2 = num
    return max(max1 * max2 * max3, min1 * min2)


if __name__ == "__main__":
    nums = [1, 2, 3]
    result = max_product_of_three(nums)
    print(result)

A6.

def binary_search(nums, target):
    """
    Searches for the target in the array nums.

    Args:
        nums: An array of integers sorted in ascending order.
        target: The integer to be searched.

    Returns:
        The index of the target if it exists, -1 otherwise.
    """

    left = 0
    right = len(nums) - 1
    while left <= right:
        mid = (left + right) // 2
        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1


if __name__ == "__main__":
    nums = [-1, 0, 3, 5, 9, 12]
    target = 9
    result = binary_search(nums, target)
    print(result)

A7.

def is_monotonic(nums):
    """
    Determines if the array nums is monotonic.

    Args:
        nums: An array of integers.

    Returns:
        True if the array nums is monotonic, False otherwise.
    """

    increasing = True
    decreasing = True
    for i in range(1, len(nums)):
        if nums[i] < nums[i - 1]:
            increasing = False
        elif nums[i] > nums[i - 1]:
            decreasing = False
    return increasing or decreasing


if __name__ == "__main__":
    nums = [1, 2, 2, 3]
    result = is_monotonic(nums)
    print(result)

A8.

def min_score(nums, k):
    """
    Determines the minimum score of nums after applying the mentioned operation at most once for each index in it.

    Args:
        nums: An array of integers.
        k: An integer.

    Returns:
        The minimum score of nums.
    """

    min_num = nums[0]
    max_num = nums[0]
    for num in nums:
        min_num = min(min_num, num)
        max_num = max(max_num, num)
    for i in range(len(nums)):
        for x in range(-k, k + 1):
            new_min = min(min_num, nums[i] + x)
            new_max = max(max_num, nums[i] + x)
            score = new_max - new_min
            if score < min_score:
                min_score = score
    return min_score


if __name__ == "__main__":
    nums = [1]
    k = 0
    result = min_score(nums, k)
    print(result)
