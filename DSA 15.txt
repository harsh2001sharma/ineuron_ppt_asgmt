A1.

def next_greater_element(arr):
    """
    Finds the next greater element for each element of the array.

    Args:
        arr: The array of elements.

    Returns:
        An array of next greater elements.
    """

    stack = []
    n = len(arr)
    nge = [-1] * n
    for i in range(n - 1, -1, -1):
        while stack and arr[i] >= stack[-1]:
            stack.pop()
        if stack:
            nge[i] = stack[-1]
        else:
            nge[i] = -1
        stack.append(arr[i])
    return nge


if __name__ == "__main__":
    value = [1, 3, 2, 4]
    result = next_greater_element(value)
    print(result)

A2.

def nearest_smaller_element(arr):
    """
    Finds the nearest smaller element for each element of the array.

    Args:
        arr: The array of elements.

    Returns:
        An array of nearest smaller elements.
    """

    n = len(arr)
    stack = []
    nsm = [-1] * n
    for i in range(n):
        while stack and arr[i] > arr[stack[-1]]:
            nsm[stack[-1]] = arr[i]
            stack.pop()
        stack.append(i)
    return nsm


if __name__ == "__main__":
    value = [1, 6, 2]
    result = nearest_smaller_element(value)
    print(result)

A3.

class Stack:
    def __init__(self):
        self.q1 = []
        self.q2 = []

    def push(self, x):
        self.q1.append(x)

    def pop(self):
        if len(self.q1) == 0:
            return -1
        while len(self.q1) > 1:
            temp = self.q1.pop(0)
            self.q2.append(temp)
        x = self.q1.pop(0)
        self.q1, self.q2 = self.q2, self.q1
        return x


if __name__ == "__main__":
    stack = Stack()
    stack.push(2)
    stack.push(3)
    print(stack.pop())
    stack.push(4)
    print(stack.pop())

A4.

def reverse_stack(St):
    if len(St) <= 1:
        return

    x = St.pop()
    reverse_stack(St)
    St.append(x)


if __name__ == "__main__":
    St = [3, 2, 1, 7, 6]
    reverse_stack(St)
    print(St)

A5.

def reverse_string(S):
    stack = []
    for ch in S:
        stack.append(ch)
    reversed_string = ""
    for i in range(len(stack)):
        reversed_string += stack.pop()
    return reversed_string


if __name__ == "__main__":
    S = "GeeksforGeeks"
    print(reverse_string(S))

A6.

def evaluate_postfix_expression(S):
    stack = []
    for ch in S:
        if ch.isdigit():
            stack.append(int(ch))
        else:
            a = stack.pop()
            b = stack.pop()
            if ch == "+":
                stack.append(a + b)
            elif ch == "-":
                stack.append(a - b)
            elif ch == "*":
                stack.append(a * b)
            else:
                stack.append(a / b)
    return stack.pop()


if __name__ == "__main__":
    S = "231*+9-"
    print(evaluate_postfix_expression(S))

A7.

class MinStack:

    def __init__(self):
        self.stack = []
        self.min_stack = []

    def push(self, val):
        self.stack.append(val)
        if not self.min_stack or val <= self.min_stack[-1]:
            self.min_stack.append(val)

    def pop(self):
        val = self.stack.pop()
        if val == self.min_stack[-1]:
            self.min_stack.pop()

    def top(self):
        return self.stack[-1]

    def getMin(self):
        return self.min_stack[-1]


if __name__ == "__main__":
    min_stack = MinStack()
    min_stack.push(-2)
    min_stack.push(0)
    min_stack.push(-3)
    assert min_stack.getMin() == -3
    min_stack.pop()
    assert min_stack.top() == 0
    assert min_stack.getMin() == -2

A8.

def trapped_water(height):
    """
    Computes the amount of water that can be trapped after raining.

    Args:
        height: An array of non-negative integers representing the elevation map.

    Returns:
        The amount of water that can be trapped.
    """

    n = len(height)
    left_max = [0] * n
    right_max = [0] * n

    for i in range(1, n):
        left_max[i] = max(left_max[i - 1], height[i - 1])

    for i in range(n - 2, -1, -1):
        right_max[i] = max(right_max[i + 1], height[i + 1])

    water = 0
    for i in range(n):
        trapped = min(left_max[i], right_max[i]) - height[i]
        if trapped > 0:
            water += trapped
    return water


if __name__ == "__main__":
    height = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]
    assert trapped_water(height) == 6
