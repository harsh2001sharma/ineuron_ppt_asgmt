A1.

from heapq import heappop, heappush

def merge_linked_lists(lists):
    """
    Merges all the linked lists into one sorted linked list.

    Args:
        lists: The array of linked lists.

    Returns:
        The merged linked list.
    """

    if not lists:
        return None

    pq = []

    for list in lists:
        if list:
            heappush(pq, (list[0], list))

    merged_list = None

    while pq:
        val, list = heappop(pq)

        if merged_list is None:
            merged_list = list
        else:
            merged_list.next = list
            merged_list = merged_list.next
            if merged_list.next:
                heappush(pq, (merged_list.next.val, merged_list.next))

    return merged_list


if __name__ == "__main__":
    lists = [[1, 4, 5], [1, 3, 4], [2, 6]]
    result = merge_linked_lists(lists)
    print(result)

A2.

def count_smaller_elements(nums):
    """
    Computes the number of smaller elements to the right of each element in the array.

    Args:
        nums: The array of numbers.

    Returns:
        The array of counts.
    """

    counts = [0] * len(nums)
    stack = []

    for i in range(len(nums) - 1, -1, -1):
        while stack and nums[stack[-1]] >= nums[i]:
            stack.pop()

        counts[i] = len(stack)
        stack.append(i)

    return counts


if __name__ == "__main__":
    nums = [5, 2, 6, 1]
    result = count_smaller_elements(nums)
    print(result)

A3.

def quick_sort(nums, left, right):
    if left >= right:
        return

    pivot = nums[left]
    i = left + 1
    j = right

    while i <= j:
        while i <= j and nums[i] <= pivot:
            i += 1

        while i <= j and nums[j] > pivot:
            j -= 1

        if i <= j:
            nums[i], nums[j] = nums[j], nums[i]

    quick_sort(nums, left, j - 1)
    quick_sort(nums, i, right)


def sort_array(nums):
    quick_sort(nums, 0, len(nums) - 1)
    return nums


if __name__ == "__main__":
    nums = [5, 2, 3, 1]
    result = sort_array(nums)
    print(result)

A4.

def push_zeros_to_end(arr):
    """
    Pushes all the zeros to the end of the array.

    Args:
        arr: The array of numbers.

    Returns:
        The modified array.
    """

    j = 0

    for i in range(len(arr)):
        if arr[i] != 0:
            arr[j] = arr[i]
            j += 1

    for i in range(j, len(arr)):
        arr[i] = 0

    return arr


if __name__ == "__main__":
    arr = [1, 2, 0, 4, 3, 0, 5, 0]
    result = push_zeros_to_end(arr)
    print(result)

A5.

def rearrange_array(arr):
    """
    Rearranges the array in alternating positive and negative items with O(1) extra space.

    Args:
        arr: The array of numbers.

    Returns:
        The rearranged array.
    """

    i = 0
    j = 1

    while i < len(arr) and j < len(arr):
        if arr[i] > 0 and arr[j] < 0:
            arr[i], arr[j] = arr[j], arr[i]
            i += 2
            j += 2
        elif arr[i] < 0 and arr[j] > 0:
            i += 1
            j += 1
        else:
            if arr[i] > 0:
                i += 1
            else:
                j += 1

    return arr


if __name__ == "__main__":
    arr = [1, 2, 3, -4, -1, 4]
    result = rearrange_array(arr)
    print(result)

A6.

def merge_sorted_arrays(arr1, arr2):
    """
    Merges two sorted arrays.

    Args:
        arr1: The first sorted array.
        arr2: The second sorted array.

    Returns:
        The merged sorted array.
    """

    i = 0
    j = 0
    k = 0

    arr3 = []

    while i < len(arr1) and j < len(arr2):
        if arr1[i] <= arr2[j]:
            arr3.append(arr1[i])
            i += 1
        else:
            arr3.append(arr2[j])
            j += 1

    while i < len(arr1):
        arr3.append(arr1[i])
        i += 1

    while j < len(arr2):
        arr3.append(arr2[j])
        j += 1

    return arr3


if __name__ == "__main__":
    arr1 = [1, 3, 4, 5]
    arr2 = [2, 4, 6, 8]
    result = merge_sorted_arrays(arr1, arr2)
    print(result)

A7.

def intersection_of_arrays(nums1, nums2):
    """
    Finds the intersection of two arrays.

    Args:
        nums1: The first array.
        nums2: The second array.

    Returns:
        The intersection of the two arrays.
    """

    nums1_set = set(nums1)
    nums2_set = set(nums2)
    result = []

    for num in nums1_set:
        if num in nums2_set:
            result.append(num)

    return result


if __name__ == "__main__":
    nums1 = [1, 2, 2, 1]
    nums2 = [2, 2]
    result = intersection_of_arrays(nums1, nums2)
    print(result)

A8.

def intersection_of_arrays(nums1, nums2):
    """
    Finds the intersection of two arrays.

    Args:
        nums1: The first array.
        nums2: The second array.

    Returns:
        The intersection of the two arrays.
    """

    nums1_set = set(nums1)
    nums2_set = set(nums2)
    result = []

    for num in nums1_set:
        if num in nums2_set:
            result.append(num)

    return result


if __name__ == "__main__":
    nums1 = [1, 2, 2, 1]
    nums2 = [2, 2]
    result = intersection_of_arrays(nums1, nums2)
    print(result)
