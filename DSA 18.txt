A1.

def merge_intervals(intervals):
    """
    Merges all overlapping intervals in an array of intervals.

    Args:
        intervals: The array of intervals.

    Returns:
        An array of the non-overlapping intervals that cover all the intervals in the input.
    """

    merged_intervals = []
    intervals.sort()

    i = 0
    while i < len(intervals):
        start = intervals[i][0]
        end = intervals[i][1]

        while i < len(intervals) - 1 and intervals[i + 1][0] <= end:
            end = max(end, intervals[i + 1][1])
            i += 1

        merged_intervals.append([start, end])

    return merged_intervals


if __name__ == "__main__":
    intervals = [[1, 3], [2, 6], [8, 10], [15, 18]]
    result = merge_intervals(intervals)
    print(result)

A2.

def sort_colors(nums):
    """
    Sorts the colors in an array in-place.

    Args:
        nums: The array of colors.

    Returns:
        The sorted array of colors.
    """

    i = 0
    j = 0
    k = len(nums) - 1

    while i <= k:
        if nums[i] == 0:
            nums[i], nums[j] = nums[j], nums[i]
            j += 1
        elif nums[i] == 2:
            nums[i], nums[k] = nums[k], nums[i]
            k -= 1
        else:
            i += 1

    return nums


if __name__ == "__main__":
    nums = [2, 0, 2, 1, 1, 0]
    result = sort_colors(nums)
    print(result)

A3.

def first_bad_version(n):
    """
    Finds the first bad version using a binary search.

    Args:
        n: The number of versions.

    Returns:
        The first bad version.
    """

    low = 1
    high = n

    while low <= high:
        mid = (low + high) // 2

        if isBadVersion(mid):
            high = mid - 1
        else:
            low = mid + 1

    return low


if __name__ == "__main__":
    n = 5
    bad = 4
    result = first_bad_version(n)
    print(result)

A4.

def max_diff_in_sorted_array(nums):
    """
    Computes the maximum difference between two successive elements in the sorted form of an array.

    Args:
        nums: The array of numbers.

    Returns:
        The maximum difference.
    """

    if len(nums) < 2:
        return 0

    max_diff = 0
    prev = nums[0]

    for i in range(1, len(nums)):
        current = nums[i]

        if current - prev > max_diff:
            max_diff = current - prev

        prev = current

    return max_diff


if __name__ == "__main__":
    nums = [3, 6, 9, 1]
    result = max_diff_in_sorted_array(nums)
    print(result)

A5.

def contains_duplicate(nums):
    """
    Checks if the array contains any duplicate elements.

    Args:
        nums: The array of numbers.

    Returns:
        True if the array contains any duplicate elements, and False otherwise.
    """

    seen = set()

    for num in nums:
        if num in seen:
            return True
        else:
            seen.add(num)

    return False


if __name__ == "__main__":
    nums = [1, 2, 3, 1]
    result = contains_duplicate(nums)
    print(result)

A6.

import heapq

def minimum_arrows(points):
    """
    Computes the minimum number of arrows needed to burst all balloons.

    Args:
        points: The array of balloons.

    Returns:
        The minimum number of arrows.
    """

    pq = []

    for xstart, xend in points:
        heapq.heappush(pq, (xend, xstart))

    arrows = 0
    xmax = float("-inf")

    while pq:
        xend, xstart = heapq.heappop(pq)

        if xstart <= xmax:
            continue

        arrows += 1
        xmax = xend

    return arrows


if __name__ == "__main__":
    points = [[10, 16], [2, 8], [1, 6], [7, 12]]
    result = minimum_arrows(points)
    print(result)

A7.

def longest_increasing_subsequence(nums):
    """
    Computes the length of the longest strictly increasing subsequence.

    Args:
        nums: The array of numbers.

    Returns:
        The length of the longest strictly increasing subsequence.
    """

    dp = [1] * len(nums)

    for i in range(1, len(nums)):
        for j in range(i):
            if nums[i] > nums[j] and dp[i] < dp[j] + 1:
                dp[i] = dp[j] + 1

    return max(dp)


if __name__ == "__main__":
    nums = [10, 9, 2, 5, 3, 7, 101, 18]
    result = longest_increasing_subsequence(nums)
    print(result)

A8.

def find_132_pattern(nums):
    """
    Checks if the array contains a 132 pattern.

    Args:
        nums: The array of numbers.

    Returns:
        True if the array contains a 132 pattern, and False otherwise.
    """

    min_so_far = float("inf")
    second = float("-inf")

    for num in nums:
        if num <= min_so_far:
            min_so_far = num
        elif num > second:
            if num < min_so_far:
                return True
            else:
                second = num

    return False


if __name__ == "__main__":
    nums = [1, 2, 3, 4]
    result = find_132_pattern(nums)
    print(result)
